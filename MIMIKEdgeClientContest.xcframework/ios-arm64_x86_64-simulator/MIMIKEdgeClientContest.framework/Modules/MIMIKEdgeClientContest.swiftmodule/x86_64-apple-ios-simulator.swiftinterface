// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MIMIKEdgeClientContest
import Alamofire
import Foundation
import MIMIKEdgeClientCore
import Swift
import SwiftyJSON
import _Concurrency
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct ContestantGroup : Swift.Codable {
    public enum LeaderboardType : Swift.String, Swift.Codable {
      case dedicated
      case cumulative
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var contestId: Foundation.UUID
    public var leaderboardType: MIMIKEdgeClientCore.MIMIKEdgeClient.ContestantGroup.LeaderboardType
    public var title: Swift.String?
    public var _description: Swift.String?
    public var rounds: [Swift.String]?
    public var size: Swift.Double?
    public var _id: Foundation.UUID
    public var createdAt: Foundation.Date
    public var updatedAt: Foundation.Date
    public init(contestId: Foundation.UUID, leaderboardType: MIMIKEdgeClientCore.MIMIKEdgeClient.ContestantGroup.LeaderboardType, title: Swift.String?, _description: Swift.String?, rounds: [Swift.String]?, size: Swift.Double?, _id: Foundation.UUID, createdAt: Foundation.Date, updatedAt: Foundation.Date)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case contestId
      case leaderboardType
      case title
      case _description
      case rounds
      case size
      case _id
      case createdAt
      case updatedAt
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct NewVote : Swift.Codable {
    public var userId: Swift.String
    public var contestId: Foundation.UUID
    public var roundId: Foundation.UUID
    public var contestantId: Foundation.UUID
    public var referrer: Swift.String?
    public var anonymous: Swift.Bool?
    public init(userId: Swift.String, contestId: Foundation.UUID, roundId: Foundation.UUID, contestantId: Foundation.UUID, referrer: Swift.String?, anonymous: Swift.Bool?)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct VoteSummary : Swift.Codable {
    public enum ModelType : Swift.String, Swift.Codable {
      case free
      case purchased
      case judge
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var _id: Foundation.UUID?
    public var contestId: Foundation.UUID?
    public var contestantId: Foundation.UUID?
    public var roundId: Foundation.UUID?
    public var groupId: Foundation.UUID?
    public var type: MIMIKEdgeClientCore.MIMIKEdgeClient.VoteSummary.ModelType?
    public var votes: Swift.Double?
    public init(_id: Foundation.UUID?, contestId: Foundation.UUID?, contestantId: Foundation.UUID?, roundId: Foundation.UUID?, groupId: Foundation.UUID?, type: MIMIKEdgeClientCore.MIMIKEdgeClient.VoteSummary.ModelType?, votes: Swift.Double?)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case _id
      case contestId
      case contestantId
      case roundId
      case groupId
      case type
      case votes
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  
  #if compiler(>=5.3) && $AsyncAwait
  final public func createModerationRequest(service: MIMIKEdgeClientCore.MIMIKService, newModerationRequest: MIMIKEdgeClientCore.MIMIKEdgeClient.NewModerationRequest) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKEdgeClient.ModerationResponse, Foundation.NSError>
  #endif

}
@objc @_inheritsConvenienceInitializers final public class MIMIKEdgeClientContest : ObjectiveC.NSObject {
  public static let kSwaggerFileVersion: Swift.String
  public static let kServiceType: MIMIKEdgeClientCore.MIMIKService.ServiceType
  public static let kHealthCheckPath: Swift.String
  final public class func swaggerFileVersion() -> Swift.String
  final public class func serviceType() -> MIMIKEdgeClientCore.MIMIKService.ServiceType
  final public class func serviceConfiguration(rootUrl: Foundation.URL, clientId: Swift.String) -> MIMIKEdgeClientCore.MIMIKService
  final public class func healthCheckPath() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  
  #if compiler(>=5.3) && $AsyncAwait
  final public func contests(service: MIMIKEdgeClientCore.MIMIKService, judgeId: Swift.String?, charityId: Swift.String?, pageSize: Swift.Int?, startAfter: Swift.String?, pagingHandler: MIMIKEdgeClientCore.MIMIKEdgeClient.PagingHandler?) async -> Swift.Result<[MIMIKEdgeClientCore.MIMIKEdgeClient.Contest], Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func contest(service: MIMIKEdgeClientCore.MIMIKService, id: Swift.String) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKEdgeClient.Contest, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func leaderboards(service: MIMIKEdgeClientCore.MIMIKService, id: Swift.String, contestantId: Swift.String?, roundId: Swift.String?, groupId: Swift.String?, pageSize: Swift.Int?, startAfter: Swift.String?, pagingHandler: MIMIKEdgeClientCore.MIMIKEdgeClient.PagingHandler?) async -> Swift.Result<[MIMIKEdgeClientCore.MIMIKEdgeClient.LeaderboardEntry], Foundation.NSError>
  #endif

}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct NewModerationRequestReferences : Swift.Codable {
    public var url: Swift.String?
    public var externalId: Swift.String?
    public init(url: Swift.String?, externalId: Swift.String?)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct UpdateContestant : Swift.Codable {
    public enum Status : Swift.String, Swift.Codable {
      case withdrawn
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var userId: Swift.String
    public var phoneNumber: Swift.String?
    public var _description: Swift.String?
    public var socialMediaAccounts: [MIMIKEdgeClientCore.MIMIKEdgeClient.SocialMediaAccount]?
    public var status: MIMIKEdgeClientCore.MIMIKEdgeClient.UpdateContestant.Status?
    public init(userId: Swift.String, phoneNumber: Swift.String?, _description: Swift.String?, socialMediaAccounts: [MIMIKEdgeClientCore.MIMIKEdgeClient.SocialMediaAccount]?, status: MIMIKEdgeClientCore.MIMIKEdgeClient.UpdateContestant.Status?)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case userId
      case phoneNumber
      case _description
      case socialMediaAccounts
      case status
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct Judge : Swift.Codable {
    public var name: Swift.String
    public var title: Swift.String
    public var photo: Swift.String
    public var email: Swift.String
    public var socialMediaAccounts: [MIMIKEdgeClientCore.MIMIKEdgeClient.SocialMediaAccount]?
    public var _id: Foundation.UUID
    public var createdAt: Foundation.Date
    public var updatedAt: Foundation.Date
    public init(name: Swift.String, title: Swift.String, photo: Swift.String, email: Swift.String, socialMediaAccounts: [MIMIKEdgeClientCore.MIMIKEdgeClient.SocialMediaAccount]?, _id: Foundation.UUID, createdAt: Foundation.Date, updatedAt: Foundation.Date)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case name
      case title
      case photo
      case email
      case socialMediaAccounts
      case _id
      case createdAt
      case updatedAt
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct Contest : Swift.Codable {
    public enum Status : Swift.String, Swift.Codable {
      case unpublished
      case announced
      case registration
      case inprogress
      case ended
      case cancelled
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var name: Swift.String
    public var _description: Swift.String
    public var contentTypes: [MIMIKEdgeClientCore.MIMIKEdgeClient.ContentType]
    public var clientName: Swift.String
    public var judges: [Foundation.UUID]
    public var maxJudgeVotes: Swift.Double
    public var startDate: Foundation.Date
    public var endDate: Foundation.Date
    public var banners: [MIMIKEdgeClientCore.MIMIKEdgeClient.Banner]?
    public var logo: Swift.String?
    public var votePackages: [Foundation.UUID]?
    public var leaderboardInterval: Swift.Double?
    public var charityId: Foundation.UUID?
    public var prizes: [MIMIKEdgeClientCore.MIMIKEdgeClient.Prize]?
    public var status: MIMIKEdgeClientCore.MIMIKEdgeClient.Contest.Status?
    public var _id: Foundation.UUID
    public var scheduledEvents: [MIMIKEdgeClientCore.MIMIKEdgeClient.ScheduledEvent]?
    public var createdAt: Foundation.Date
    public var updatedAt: Foundation.Date
    public init(name: Swift.String, _description: Swift.String, contentTypes: [MIMIKEdgeClientCore.MIMIKEdgeClient.ContentType], clientName: Swift.String, judges: [Foundation.UUID], maxJudgeVotes: Swift.Double, startDate: Foundation.Date, endDate: Foundation.Date, banners: [MIMIKEdgeClientCore.MIMIKEdgeClient.Banner]?, logo: Swift.String?, votePackages: [Foundation.UUID]?, leaderboardInterval: Swift.Double?, charityId: Foundation.UUID?, prizes: [MIMIKEdgeClientCore.MIMIKEdgeClient.Prize]?, status: MIMIKEdgeClientCore.MIMIKEdgeClient.Contest.Status?, _id: Foundation.UUID, scheduledEvents: [MIMIKEdgeClientCore.MIMIKEdgeClient.ScheduledEvent]?, createdAt: Foundation.Date, updatedAt: Foundation.Date)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case name
      case _description
      case contentTypes
      case clientName
      case judges
      case maxJudgeVotes
      case startDate
      case endDate
      case banners
      case logo
      case votePackages
      case leaderboardInterval
      case charityId
      case prizes
      case status
      case _id
      case scheduledEvents
      case createdAt
      case updatedAt
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  
  #if compiler(>=5.3) && $AsyncAwait
  final public func votePackages(service: MIMIKEdgeClientCore.MIMIKService, contestId: Swift.String?, roundId: Swift.String?, status: Swift.String?) async -> Swift.Result<[MIMIKEdgeClientCore.MIMIKEdgeClient.VotePackage], Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func votePackage(service: MIMIKEdgeClientCore.MIMIKService, id: Swift.String) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKEdgeClient.VotePackage, Foundation.NSError>
  #endif

}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct WinnerCriteria : Swift.Codable {
    public var minVotes: Swift.Double?
    public var totalWinners: Swift.Double
    public init(minVotes: Swift.Double?, totalWinners: Swift.Double)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct ScheduledEvent : Swift.Codable {
    public var _id: Foundation.UUID
    public var type: Swift.String
    public var createdAt: Foundation.Date?
    public var updatedAt: Foundation.Date?
    public init(_id: Foundation.UUID, type: Swift.String, createdAt: Foundation.Date?, updatedAt: Foundation.Date?)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case _id
      case type
      case createdAt
      case updatedAt
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct NewModerationRequestResource : Swift.Codable {
    public enum ModelType : Swift.String, Swift.Codable {
      case contestant
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var type: MIMIKEdgeClientCore.MIMIKEdgeClient.NewModerationRequestResource.ModelType
    public var _id: Foundation.UUID
    public init(type: MIMIKEdgeClientCore.MIMIKEdgeClient.NewModerationRequestResource.ModelType, _id: Foundation.UUID)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case type
      case _id
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct ContestRound : Swift.Codable {
    public enum LeaderboardType : Swift.String, Swift.Codable {
      case dedicated
      case cumulative
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum Voters : Swift.String, Swift.Codable {
      case viewers
      case judges
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum Status : Swift.String, Swift.Codable {
      case announced
      case inprogress
      case ended
      case cancelled
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var title: Swift.String
    public var _description: Swift.String?
    public var maxContestants: Swift.Double
    public var leaderboardType: MIMIKEdgeClientCore.MIMIKEdgeClient.ContestRound.LeaderboardType
    public var winnerCriteria: MIMIKEdgeClientCore.MIMIKEdgeClient.WinnerCriteria
    public var voters: MIMIKEdgeClientCore.MIMIKEdgeClient.ContestRound.Voters
    public var contestId: Foundation.UUID
    public var startDate: Foundation.Date
    public var endDate: Foundation.Date
    public var groupingCriteria: MIMIKEdgeClientCore.MIMIKEdgeClient.GroupingCriteria?
    public var votePackages: [Foundation.UUID]?
    public var previousRound: Foundation.UUID?
    public var nextRound: Foundation.UUID?
    public var status: MIMIKEdgeClientCore.MIMIKEdgeClient.ContestRound.Status?
    public var _id: Foundation.UUID
    public var scheduledEvents: [MIMIKEdgeClientCore.MIMIKEdgeClient.ScheduledEvent]?
    public var createdAt: Foundation.Date
    public var updatedAt: Foundation.Date
    public init(title: Swift.String, _description: Swift.String?, maxContestants: Swift.Double, leaderboardType: MIMIKEdgeClientCore.MIMIKEdgeClient.ContestRound.LeaderboardType, winnerCriteria: MIMIKEdgeClientCore.MIMIKEdgeClient.WinnerCriteria, voters: MIMIKEdgeClientCore.MIMIKEdgeClient.ContestRound.Voters, contestId: Foundation.UUID, startDate: Foundation.Date, endDate: Foundation.Date, groupingCriteria: MIMIKEdgeClientCore.MIMIKEdgeClient.GroupingCriteria?, votePackages: [Foundation.UUID]?, previousRound: Foundation.UUID?, nextRound: Foundation.UUID?, status: MIMIKEdgeClientCore.MIMIKEdgeClient.ContestRound.Status?, _id: Foundation.UUID, scheduledEvents: [MIMIKEdgeClientCore.MIMIKEdgeClient.ScheduledEvent]?, createdAt: Foundation.Date, updatedAt: Foundation.Date)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case title
      case _description
      case maxContestants
      case leaderboardType
      case winnerCriteria
      case voters
      case contestId
      case startDate
      case endDate
      case groupingCriteria
      case votePackages
      case previousRound
      case nextRound
      case status
      case _id
      case scheduledEvents
      case createdAt
      case updatedAt
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct Contestant : Swift.Codable {
    public enum Status : Swift.String, Swift.Codable {
      case pending
      case active
      case disqualified
      case eliminated
      case wildcard
      case withdrawn
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var userId: Swift.String
    public var phoneNumber: Swift.String?
    public var _description: Swift.String?
    public var socialMediaAccounts: [MIMIKEdgeClientCore.MIMIKEdgeClient.SocialMediaAccount]?
    public var contestId: Foundation.UUID
    public var contents: [MIMIKEdgeClientCore.MIMIKEdgeClient.Content]
    public var _id: Foundation.UUID
    public var moderationRequests: [MIMIKEdgeClientCore.MIMIKEdgeClient.ContestantModeration]?
    public var status: MIMIKEdgeClientCore.MIMIKEdgeClient.Contestant.Status
    public var createdAt: Foundation.Date
    public var updatedAt: Foundation.Date
    public init(userId: Swift.String, phoneNumber: Swift.String?, _description: Swift.String?, socialMediaAccounts: [MIMIKEdgeClientCore.MIMIKEdgeClient.SocialMediaAccount]?, contestId: Foundation.UUID, contents: [MIMIKEdgeClientCore.MIMIKEdgeClient.Content], _id: Foundation.UUID, moderationRequests: [MIMIKEdgeClientCore.MIMIKEdgeClient.ContestantModeration]?, status: MIMIKEdgeClientCore.MIMIKEdgeClient.Contestant.Status, createdAt: Foundation.Date, updatedAt: Foundation.Date)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case userId
      case phoneNumber
      case _description
      case socialMediaAccounts
      case contestId
      case contents
      case _id
      case moderationRequests
      case status
      case createdAt
      case updatedAt
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct SocialMediaAccount : Swift.Codable {
    public var handle: Swift.String
    public var type: Swift.String
    public init(handle: Swift.String, type: Swift.String)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  
  #if compiler(>=5.3) && $AsyncAwait
  final public func charities(service: MIMIKEdgeClientCore.MIMIKService, contestId: Swift.String?) async -> Swift.Result<[MIMIKEdgeClientCore.MIMIKEdgeClient.Charity], Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func charity(service: MIMIKEdgeClientCore.MIMIKService, id: Swift.String) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKEdgeClient.Charity, Foundation.NSError>
  #endif

}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct NewContestant : Swift.Codable {
    public var userId: Swift.String
    public var phoneNumber: Swift.String?
    public var _description: Swift.String?
    public var socialMediaAccounts: [MIMIKEdgeClientCore.MIMIKEdgeClient.SocialMediaAccount]?
    public var contestId: Foundation.UUID
    public var contents: [MIMIKEdgeClientCore.MIMIKEdgeClient.Content]
    public init(userId: Swift.String, phoneNumber: Swift.String?, _description: Swift.String?, socialMediaAccounts: [MIMIKEdgeClientCore.MIMIKEdgeClient.SocialMediaAccount]?, contestId: Foundation.UUID, contents: [MIMIKEdgeClientCore.MIMIKEdgeClient.Content])
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case userId
      case phoneNumber
      case _description
      case socialMediaAccounts
      case contestId
      case contents
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct VotePackage : Swift.Codable {
    public enum Status : Swift.String, Swift.Codable {
      case active
      case archived
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var voteCount: Swift.Double
    public var price: Swift.String
    public var title: Swift.String?
    public var _id: Foundation.UUID
    public var status: MIMIKEdgeClientCore.MIMIKEdgeClient.VotePackage.Status
    public var createdAt: Foundation.Date
    public var updatedAt: Foundation.Date
    public init(voteCount: Swift.Double, price: Swift.String, title: Swift.String?, _id: Foundation.UUID, status: MIMIKEdgeClientCore.MIMIKEdgeClient.VotePackage.Status, createdAt: Foundation.Date, updatedAt: Foundation.Date)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case voteCount
      case price
      case title
      case _id
      case status
      case createdAt
      case updatedAt
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct Vote : Swift.Codable {
    public enum ModelType : Swift.String, Swift.Codable {
      case free
      case purchased
      case judge
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum Status : Swift.String, Swift.Codable {
      case valid
      case disqualified
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var userId: Swift.String
    public var contestId: Foundation.UUID
    public var roundId: Foundation.UUID
    public var contestantId: Foundation.UUID
    public var referrer: Swift.String?
    public var anonymous: Swift.Bool?
    public var _id: Foundation.UUID?
    public var type: MIMIKEdgeClientCore.MIMIKEdgeClient.Vote.ModelType?
    public var votes: Swift.Double?
    public var status: MIMIKEdgeClientCore.MIMIKEdgeClient.Vote.Status?
    public var reason: Swift.String?
    public var createdAt: Foundation.Date?
    public var updatedAt: Foundation.Date?
    public init(userId: Swift.String, contestId: Foundation.UUID, roundId: Foundation.UUID, contestantId: Foundation.UUID, referrer: Swift.String?, anonymous: Swift.Bool?, _id: Foundation.UUID?, type: MIMIKEdgeClientCore.MIMIKEdgeClient.Vote.ModelType?, votes: Swift.Double?, status: MIMIKEdgeClientCore.MIMIKEdgeClient.Vote.Status?, reason: Swift.String?, createdAt: Foundation.Date?, updatedAt: Foundation.Date?)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case userId
      case contestId
      case roundId
      case contestantId
      case referrer
      case anonymous
      case _id
      case type
      case votes
      case status
      case reason
      case createdAt
      case updatedAt
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct Content : Swift.Codable {
    public enum UploadMethod : Swift.String, Swift.Codable {
      case single
      case multipart
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum VariationsSource : Swift.String, Swift.Codable {
      case uploads
      case conversion
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var _id: Foundation.UUID?
    public var type: Swift.String
    public var fileName: Swift.String
    public var uploadMethod: MIMIKEdgeClientCore.MIMIKEdgeClient.Content.UploadMethod
    public var variationsSource: MIMIKEdgeClientCore.MIMIKEdgeClient.Content.VariationsSource
    public init(_id: Foundation.UUID?, type: Swift.String, fileName: Swift.String, uploadMethod: MIMIKEdgeClientCore.MIMIKEdgeClient.Content.UploadMethod, variationsSource: MIMIKEdgeClientCore.MIMIKEdgeClient.Content.VariationsSource)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case _id
      case type
      case fileName
      case uploadMethod
      case variationsSource
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct Banner : Swift.Codable {
    public enum ModelType : Swift.String, Swift.Codable {
      case image
      case video
      case youtube
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var type: MIMIKEdgeClientCore.MIMIKEdgeClient.Banner.ModelType
    public var title: Swift.String?
    public var resolution: Swift.String
    public var url: Swift.String
    public init(type: MIMIKEdgeClientCore.MIMIKEdgeClient.Banner.ModelType, title: Swift.String?, resolution: Swift.String, url: Swift.String)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct GroupingCriteria : Swift.Codable {
    public var totalGroups: Swift.Double
    public var maxContestants: Swift.Double
    public init(totalGroups: Swift.Double, maxContestants: Swift.Double)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct ContestantModerationAction : Swift.Codable {
    public var type: Swift.String
    public init(type: Swift.String)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct Prize : Swift.Codable {
    public var order: Swift.Double
    public var title: Swift.String?
    public var _description: Swift.String?
    public var image: Swift.String
    public var value: Swift.String
    public init(order: Swift.Double, title: Swift.String?, _description: Swift.String?, image: Swift.String, value: Swift.String)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case order
      case title
      case _description
      case image
      case value
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  
  #if compiler(>=5.3) && $AsyncAwait
  final public func judges(service: MIMIKEdgeClientCore.MIMIKService, contestId: Swift.String?) async -> Swift.Result<[MIMIKEdgeClientCore.MIMIKEdgeClient.Judge], Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func judge(service: MIMIKEdgeClientCore.MIMIKService, id: Swift.String) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKEdgeClient.Judge, Foundation.NSError>
  #endif

}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct NewModerationRequest : Swift.Codable {
    public var resource: MIMIKEdgeClientCore.MIMIKEdgeClient.NewModerationRequestResource
    public var type: Swift.String
    public var _description: Swift.String?
    public var references: [MIMIKEdgeClientCore.MIMIKEdgeClient.NewModerationRequestReferences]?
    public init(resource: MIMIKEdgeClientCore.MIMIKEdgeClient.NewModerationRequestResource, type: Swift.String, _description: Swift.String?, references: [MIMIKEdgeClientCore.MIMIKEdgeClient.NewModerationRequestReferences]?)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case resource
      case type
      case _description
      case references
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct ModerationResponse : Swift.Codable {
    public var _id: Foundation.UUID
    public init(_id: Foundation.UUID)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case _id
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct ContestantModerationVerdict : Swift.Codable {
    public var type: Swift.String
    public init(type: Swift.String)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct ContestantModeration : Swift.Codable {
    public enum Status : Swift.String, Swift.Codable {
      case rejected
      case approved
      case pending
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var type: Swift.String
    public var status: MIMIKEdgeClientCore.MIMIKEdgeClient.ContestantModeration.Status
    public var verdict: MIMIKEdgeClientCore.MIMIKEdgeClient.ContestantModerationVerdict?
    public var action: MIMIKEdgeClientCore.MIMIKEdgeClient.ContestantModerationAction?
    public init(type: Swift.String, status: MIMIKEdgeClientCore.MIMIKEdgeClient.ContestantModeration.Status, verdict: MIMIKEdgeClientCore.MIMIKEdgeClient.ContestantModerationVerdict?, action: MIMIKEdgeClientCore.MIMIKEdgeClient.ContestantModerationAction?)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct LeaderboardEntry : Swift.Codable {
    public var contestantId: Foundation.UUID
    public var position: Swift.Double
    public var positionChange: Swift.Double?
    public var createdAt: Foundation.Date
    public var updatedAt: Foundation.Date
    public init(contestantId: Foundation.UUID, position: Swift.Double, positionChange: Swift.Double?, createdAt: Foundation.Date, updatedAt: Foundation.Date)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  
  #if compiler(>=5.3) && $AsyncAwait
  final public func contestants(service: MIMIKEdgeClientCore.MIMIKService, contestId: Swift.String?, userId: Swift.String?, roundId: Swift.String?, pageSize: Swift.Int?, startAfter: Swift.String?, pagingHandler: MIMIKEdgeClientCore.MIMIKEdgeClient.PagingHandler?) async -> Swift.Result<[MIMIKEdgeClientCore.MIMIKEdgeClient.Contestant], Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func createContestant(service: MIMIKEdgeClientCore.MIMIKService, newContestant: MIMIKEdgeClientCore.MIMIKEdgeClient.NewContestant) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKEdgeClient.Contestant, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func contestant(service: MIMIKEdgeClientCore.MIMIKService, id: Swift.String) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKEdgeClient.Contestant, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func updateContestant(service: MIMIKEdgeClientCore.MIMIKService, id: Swift.String, updateInfo: MIMIKEdgeClientCore.MIMIKEdgeClient.UpdateContestant) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKEdgeClient.Contestant, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func contestantGroups(service: MIMIKEdgeClientCore.MIMIKService, contestId: Swift.String, roundId: Swift.String?) async -> Swift.Result<[MIMIKEdgeClientCore.MIMIKEdgeClient.ContestantGroup], Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func contestantGroup(service: MIMIKEdgeClientCore.MIMIKService, id: Swift.String) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKEdgeClient.ContestantGroup, Foundation.NSError>
  #endif

}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  
  #if compiler(>=5.3) && $AsyncAwait
  final public func rounds(service: MIMIKEdgeClientCore.MIMIKService, contestId: Swift.String) async -> Swift.Result<[MIMIKEdgeClientCore.MIMIKEdgeClient.ContestRound], Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func round(service: MIMIKEdgeClientCore.MIMIKService, id: Swift.String) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKEdgeClient.ContestRound, Foundation.NSError>
  #endif

}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Contest {
  public func dictionary() -> [Swift.String : Any]?
  public func jsonString() -> Swift.String?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.NewContestant {
  public func dictionary() -> [Swift.String : Any]?
  public func jsonString() -> Swift.String?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.UpdateContestant {
  public func dictionary() -> [Swift.String : Any]?
  public func jsonString() -> Swift.String?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.NewModerationRequest {
  public func dictionary() -> [Swift.String : Any]?
  public func jsonString() -> Swift.String?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.NewVote {
  public func dictionary() -> [Swift.String : Any]?
  public func jsonString() -> Swift.String?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.LeaderboardEntry {
  public func dictionary() -> [Swift.String : Any]?
  public func jsonString() -> Swift.String?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Contestant {
  public func dictionary() -> [Swift.String : Any]?
  public func jsonString() -> Swift.String?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContestantGroup {
  public func dictionary() -> [Swift.String : Any]?
  public func jsonString() -> Swift.String?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Judge {
  public func dictionary() -> [Swift.String : Any]?
  public func jsonString() -> Swift.String?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContestRound {
  public func dictionary() -> [Swift.String : Any]?
  public func jsonString() -> Swift.String?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Charity {
  public func dictionary() -> [Swift.String : Any]?
  public func jsonString() -> Swift.String?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Vote {
  public func dictionary() -> [Swift.String : Any]?
  public func jsonString() -> Swift.String?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.VotePackage {
  public func dictionary() -> [Swift.String : Any]?
  public func jsonString() -> Swift.String?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.VoteSummary {
  public func dictionary() -> [Swift.String : Any]?
  public func jsonString() -> Swift.String?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ModerationResponse {
  public func dictionary() -> [Swift.String : Any]?
  public func jsonString() -> Swift.String?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct ContentType : Swift.Codable {
    public enum AccessType : Swift.String, Swift.Codable {
      case _public
      case _private
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var type: Swift.String?
    public var accessType: MIMIKEdgeClientCore.MIMIKEdgeClient.ContentType.AccessType?
    public var _required: Swift.Bool?
    public init(type: Swift.String?, accessType: MIMIKEdgeClientCore.MIMIKEdgeClient.ContentType.AccessType?, _required: Swift.Bool?)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case type
      case accessType
      case _required
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct Charity : Swift.Codable {
    public var name: Swift.String
    public var _description: Swift.String
    public var logo: Swift.String
    public var banner: Swift.String?
    public var url: Swift.String?
    public var _id: Foundation.UUID
    public var createdAt: Foundation.Date
    public var updatedAt: Foundation.Date
    public init(name: Swift.String, _description: Swift.String, logo: Swift.String, banner: Swift.String?, url: Swift.String?, _id: Foundation.UUID, createdAt: Foundation.Date, updatedAt: Foundation.Date)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case name
      case _description
      case logo
      case banner
      case url
      case _id
      case createdAt
      case updatedAt
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  
  #if compiler(>=5.3) && $AsyncAwait
  final public func votes(service: MIMIKEdgeClientCore.MIMIKService, contestId: Swift.String, roundId: Swift.String?, contestantId: Swift.String?, userId: Swift.String?, type: Swift.String?, pageSize: Swift.Int?, startAfter: Swift.String?, pagingHandler: MIMIKEdgeClientCore.MIMIKEdgeClient.PagingHandler?) async -> Swift.Result<[MIMIKEdgeClientCore.MIMIKEdgeClient.Vote], Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func createVote(service: MIMIKEdgeClientCore.MIMIKService, newVote: MIMIKEdgeClientCore.MIMIKEdgeClient.NewVote) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKEdgeClient.Vote, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func voteSummaries(service: MIMIKEdgeClientCore.MIMIKService, contestId: Swift.String, roundId: Swift.String?, contestantId: Swift.String?, pageSize: Swift.Int?, startAfter: Swift.String?, pagingHandler: MIMIKEdgeClientCore.MIMIKEdgeClient.PagingHandler?) async -> Swift.Result<[MIMIKEdgeClientCore.MIMIKEdgeClient.VoteSummary], Foundation.NSError>
  #endif

}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContestantGroup.LeaderboardType : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContestantGroup.LeaderboardType : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContestantGroup.LeaderboardType : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContestantGroup.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContestantGroup.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContestantGroup.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.VoteSummary.ModelType : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.VoteSummary.ModelType : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.VoteSummary.ModelType : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.VoteSummary.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.VoteSummary.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.VoteSummary.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.UpdateContestant.Status : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.UpdateContestant.Status : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.UpdateContestant.Status : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.UpdateContestant.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.UpdateContestant.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.UpdateContestant.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Judge.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Judge.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Judge.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Contest.Status : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Contest.Status : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Contest.Status : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Contest.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Contest.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Contest.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ScheduledEvent.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ScheduledEvent.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ScheduledEvent.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.NewModerationRequestResource.ModelType : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.NewModerationRequestResource.ModelType : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.NewModerationRequestResource.ModelType : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.NewModerationRequestResource.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.NewModerationRequestResource.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.NewModerationRequestResource.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContestRound.LeaderboardType : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContestRound.LeaderboardType : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContestRound.LeaderboardType : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContestRound.Voters : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContestRound.Voters : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContestRound.Voters : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContestRound.Status : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContestRound.Status : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContestRound.Status : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContestRound.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContestRound.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContestRound.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Contestant.Status : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Contestant.Status : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Contestant.Status : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Contestant.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Contestant.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Contestant.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.NewContestant.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.NewContestant.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.NewContestant.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.VotePackage.Status : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.VotePackage.Status : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.VotePackage.Status : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.VotePackage.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.VotePackage.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.VotePackage.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Vote.ModelType : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Vote.ModelType : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Vote.ModelType : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Vote.Status : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Vote.Status : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Vote.Status : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Vote.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Vote.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Vote.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Content.UploadMethod : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Content.UploadMethod : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Content.UploadMethod : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Content.VariationsSource : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Content.VariationsSource : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Content.VariationsSource : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Content.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Content.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Content.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Banner.ModelType : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Banner.ModelType : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Banner.ModelType : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Prize.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Prize.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Prize.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.NewModerationRequest.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.NewModerationRequest.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.NewModerationRequest.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ModerationResponse.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ModerationResponse.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ModerationResponse.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContestantModeration.Status : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContestantModeration.Status : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContestantModeration.Status : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContentType.AccessType : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContentType.AccessType : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContentType.AccessType : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContentType.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContentType.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ContentType.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Charity.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Charity.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Charity.CodingKeys : Swift.RawRepresentable {}
